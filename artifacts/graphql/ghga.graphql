# metamodel_version: 1.7.0
# version: 0.9.0
interface AccessionMixin
  {
    accession: String
  }

type Agent
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
    description: String
  }

type Analysis implements AccessionMixin, EgaAccessionMixin
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    title: String
    type: String
    referenceGenome: String!
    referenceChromosome: String!
    hasInput: [File]!
    hasStudy: Study
    hasWorkflow: [Workflow]!
    hasAnalysisProcess: [AnalysisProcess]
    hasOutput: [File]!
    alias: String!
    description: String
    accession: String
    egaAccession: String
  }

type AnalysisProcess
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    title: String
    hasInput: [File]
    hasWorkflow: Workflow
    hasAgent: Agent
    hasOutput: [File]
  }

type AnatomicalEntity implements OntologyClassMixin
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    conceptIdentifier: String
    conceptName: String
    description: String
    ontologyName: String
    ontologyVersion: String
    name: String
  }

type Ancestry implements OntologyClassMixin
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
    conceptIdentifier: String
    conceptName: String
    description: String
    ontologyName: String
    ontologyVersion: String
  }

type Attribute
  {
    key: String!
    keyType: String
    value: String!
    valueType: String
  }

interface AttributeMixin
  {
    hasAttribute: [Attribute]
  }

interface BiologicalQuality
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
  }

type Biospecimen implements AccessionMixin
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
    type: String
    description: String
    isolation: String
    storage: String
    hasIndividual: Individual
    hasAnatomicalEntity: [AnatomicalEntity]
    hasDisease: [Disease]
    hasPhenotypicFeature: [PhenotypicFeature]
    alias: String!
    accession: String
  }

type CellLine
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
  }

type Cohort implements AccessionMixin
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
    hasMember: [Individual]
    accession: String
  }

interface Committee
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
  }

type DataAccessCommittee implements AttributeMixin, AccessionMixin, EgaAccessionMixin
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String!
    description: String
    mainContact: Member
    hasMember: [Member]
    alias: String!
    hasAttribute: [Attribute]
    accession: String
    egaAccession: String
  }

type DataAccessPolicy implements AttributeMixin, AccessionMixin, EgaAccessionMixin
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
    description: String
    policyText: String!
    policyUrl: String
    hasDataAccessCommittee: DataAccessCommittee!
    hasDataUseCondition: [DataUseCondition]
    dataRequestForm: String
    alias: String!
    hasAttribute: [Attribute]
    accession: String
    egaAccession: String
  }

interface DataTransformation
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    title: String
    description: String
  }

type DataUseCondition
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    hasDataUsePermission: DataUsePermission!
    hasDataUseModifier: DataUseModifier
  }

type DataUseModifier implements OntologyClassMixin
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    conceptIdentifier: String
    conceptName: String
    description: String
    ontologyName: String
    ontologyVersion: String
    name: String
  }

type DataUsePermission implements OntologyClassMixin
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    conceptIdentifier: String
    conceptName: String
    description: String
    ontologyName: String
    ontologyVersion: String
    name: String
  }

type Dataset implements AccessionMixin, EgaAccessionMixin, PublicationMixin, ReleaseStatusMixin, AttributeMixin
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    title: String!
    description: String!
    type: String
    hasStudy: [Study]!
    hasExperiment: [Experiment]
    hasSample: [Sample]!
    hasAnalysis: [Analysis]
    hasFile: [File]!
    hasDataAccessPolicy: DataAccessPolicy!
    alias: String!
    hasPublication: [Publication]
    releaseStatus: ReleaseStatusEnum
    accession: String
    egaAccession: String
    releaseDate: String
    hasAttribute: [Attribute]
  }

interface DeprecatedMixin
  {
    replacedBy: NamedThing
    deprecationDate: String
  }

type Disease
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    conceptIdentifier: String
    conceptName: String
    description: String
    ontologyName: String
    ontologyVersion: String
    name: String
  }

type DiseaseOrPhenotypicFeature implements OntologyClassMixin
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    conceptIdentifier: String
    conceptName: String
    description: String
    ontologyName: String
    ontologyVersion: String
    name: String
  }

type Donor
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    givenName: String
    familyName: String
    additionalName: String
    sex: BiologicalSexEnum!
    karyotype: String
    age: AgeRangeEnum!
    vitalStatus: VitalStatusEnum!
    geographicalRegion: String
    hasAncestry: [Ancestry]
    hasParent: [Individual]
    hasChildren: [Individual]
    hasDisease: [Disease]
    hasPhenotypicFeature: [PhenotypicFeature]
    hasFile: [File]
    alias: String!
    accession: String
    egaAccession: String
  }

interface EgaAccessionMixin
  {
    egaAccession: String
  }

type Experiment implements AttributeMixin, AccessionMixin, EgaAccessionMixin
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    type: String
    biologicalReplicates: String
    technicalReplicates: String
    experimentalReplicates: String
    hasStudy: Study!
    hasSample: [Sample]!
    hasFile: [File]
    hasProtocol: [Protocol]!
    hasExperimentProcess: [ExperimentProcess]
    alias: String!
    title: String
    description: String!
    hasAttribute: [Attribute]
    accession: String
    egaAccession: String
  }

type ExperimentProcess implements AttributeMixin
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    type: ExperimentProcessTypeEnum
    title: String
    hasInput: Sample
    hasProtocol: Protocol
    hasAgent: Agent
    hasOutput: [File]
    hasAttribute: [Attribute]
  }

type Family implements AccessionMixin
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
    hasMember: [Individual]
    hasProband: Individual
    accession: String
  }

type File implements AccessionMixin, EgaAccessionMixin, AttributeMixin
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    drsUri: String
    name: String!
    format: FileFormatEnum!
    size: Integer!
    checksum: String!
    checksumType: String!
    alias: String!
    accession: String
    egaAccession: String
    hasAttribute: [Attribute]
  }

type Individual implements AccessionMixin, EgaAccessionMixin
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    givenName: String
    familyName: String
    additionalName: String
    sex: BiologicalSexEnum!
    karyotype: String
    age: AgeRangeEnum!
    vitalStatus: VitalStatusEnum!
    geographicalRegion: String
    hasAncestry: [Ancestry]
    hasParent: [Individual]
    hasChildren: [Individual]
    hasDisease: [Disease]
    hasPhenotypicFeature: [PhenotypicFeature]
    hasFile: [File]
    alias: String!
    accession: String
    egaAccession: String
  }

interface InformationContentEntity
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
  }

interface Investigation
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    title: String
    description: String
  }

type LibraryPreparationProtocol
  {
    id: String!
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
    type: String
    url: String
    hasFile: File
    xref: [String]
    libraryName: String!
    libraryLayout: String!
    libraryType: String!
    librarySelection: String!
    libraryPreparation: String!
    libraryPreparationKitRetailName: String!
    libraryPreparationKitManufacturer: String!
    primer: String
    endBias: String
    targetRegions: String
    rnaseqStrandedness: String
    alias: String!
    description: String!
    hasAttribute: [Attribute]
  }

interface MaterialEntity
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
  }

type Member
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    givenName: String
    familyName: String
    additionalName: String
    email: String!
    telephone: String
    organization: String!
  }

interface MetadataMixin
  {
    schemaType: String
    schemaVersion: String
  }

type NamedThing implements MetadataMixin
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
  }

interface OntologyClassMixin
  {
    id: String!
    conceptIdentifier: String
    conceptName: String
    description: String
    ontologyName: String
    ontologyVersion: String
    name: String
  }

interface Person
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    givenName: String
    familyName: String
    additionalName: String
  }

type PhenotypicFeature
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    conceptIdentifier: String
    conceptName: String
    description: String
    ontologyName: String
    ontologyVersion: String
    name: String
  }

interface PlannedProcess
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
  }

interface Population
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
  }

type Project implements AccessionMixin, AttributeMixin
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    alias: String!
    title: String!
    description: String!
    hasPublication: [Publication]
    hasAttribute: [Attribute]
    accession: String
  }

type Protocol implements AttributeMixin
  {
    id: String!
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
    type: String
    description: String
    url: String
    hasFile: File
    alias: String!
    xref: [String]
    hasAttribute: [Attribute]
  }

type Publication
  {
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    title: String
    abstract: String
    id: String!
    alias: String!
    xref: [String]
  }

interface PublicationMixin
  {
    hasPublication: Publication
  }

interface ReleaseStatusMixin
  {
    releaseStatus: String
    releaseDate: String
  }

interface ResearchActivity
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    title: String
    description: String
  }

type Sample implements AccessionMixin, EgaAccessionMixin, AttributeMixin
  {
    id: String!
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String!
    type: String
    description: String!
    caseControlStatus: CaseControlStatusEnum
    vitalStatusAtSampling: VitalStatusEnum
    isolation: String
    storage: String
    hasIndividual: Individual
    hasAnatomicalEntity: [AnatomicalEntity]
    hasBiospecimen: Biospecimen
    alias: String!
    xref: [String]
    accession: String
    egaAccession: String
    hasAttribute: [Attribute]
  }

type SequencingProtocol
  {
    id: String!
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String
    url: String
    hasFile: File
    xref: [String]
    sequencingCenter: String
    instrumentModel: String!
    pairedOrSingleEnd: PairedOrSingleEndEnum
    forwardOrReverse: ForwardOrReverseEnum
    sequencingReadLength: String
    indexSequence: String
    targetCoverage: String
    laneNumber: String
    flowCellId: String
    flowCellType: String
    umiBarcodeRead: String
    umiBarcodeSize: String
    umiBarcodeOffset: String
    cellBarcodeRead: String
    cellBarcodeOffset: String
    cellBarcodeSize: String
    sampleBarcodeRead: String
    alias: String!
    type: String
    description: String!
    hasAttribute: [Attribute]
  }

type Study implements AccessionMixin, EgaAccessionMixin, PublicationMixin, AttributeMixin, ReleaseStatusMixin
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    type: StudyTypeEnum!
    affiliation: [String]!
    hasProject: Project
    hasFile: [File]
    alias: String!
    title: String!
    description: String!
    hasPublication: [Publication]
    hasAttribute: [Attribute]
    releaseStatus: ReleaseStatusEnum
    accession: String
    egaAccession: String
    releaseDate: String
  }

type Submission implements MetadataMixin
  {
    id: String!
    affiliation: String
    hasStudy: [Study]
    hasProject: Project
    hasSample: [Sample]
    hasBiospecimen: [Biospecimen]
    hasIndividual: [Individual]
    hasExperiment: [Experiment]
    hasProtocol: [Protocol]
    hasAnalysis: [Analysis]
    hasFile: [File]
    hasDataset: [Dataset]
    hasDataAccessPolicy: [DataAccessPolicy]
    hasDataAccessCommittee: [DataAccessCommittee]
    hasMember: [Individual]
    hasPublication: [Publication]
    submissionDate: String
    creationDate: String
    updateDate: String
    submissionStatus: SubmissionStatusEnum
    schemaType: String
    schemaVersion: String
  }

type Technology
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
  }

type User
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    givenName: String
    familyName: String
    additionalName: String
    email: String
    role: UserRoleEnum
  }

type Workflow
  {
    id: String!
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    name: String!
    hasWorkflowStep: [WorkflowStep]
    alias: String!
  }

type WorkflowParameter
  {
    key: String
    value: String
  }

type WorkflowStep
  {
    id: String!
    alias: String
    xref: [String]
    creationDate: String
    updateDate: String
    schemaType: String
    schemaVersion: String
    hasWorkflowParameter: [WorkflowParameter]
  }


